----TABLES

CREATE TABLE UserIn(
    username varchar(50),
    land varchar(50) NOT NULL,
    fav_genre varchar(50) NOT NULL,
    PRIMARY KEY(username));

CREATE TABLE Playlist(
    username varchar(20),
    listname varchar(30),
    song_anzahl integer DEFAULT 0,
    genre varchar(20),
    PRIMARY KEY(username,listname),
    FOREIGN KEY(username) REFERENCES UserIn ON DELETE CASCADE
);

CREATE TABLE Song(
    songid integer CHECK (songid >= 1),
    songname varchar(30) NOT NULL,
    laenge varchar(10) NOT NULL,
    PRIMARY KEY(songid)
);

CREATE TABLE Zeitpunkt(
    datum varchar(40),
    ort varchar(20),
    PRIMARY KEY(datum,ort)
);

CREATE TABLE SingleKuenstler(
    kid integer GENERATED BY DEFAULT AS IDENTITY CHECK(kid >= 1),
    kname varchar(30) UNIQUE,
    kalter integer,
    PRIMARY KEY(kid)
);

CREATE TABLE BandKuenstler(
    kid integer GENERATED BY DEFAULT AS IDENTITY CHECK(kid >= 1),
    kname varchar(30) UNIQUE,
    teilnehmer integer,
    PRIMARY KEY(kid)
);

CREATE TABLE SingleVeroeffentlicht(
    kid integer,
    songid integer,
    PRIMARY KEY(kid,songid),
    FOREIGN KEY(kid) REFERENCES SingleKuenstler ON DELETE CASCADE,
    FOREIGN KEY(songid) REFERENCES Song ON DELETE CASCADE
);

CREATE TABLE BandVeroeffentlicht(
    kid integer,
    songid integer,
    PRIMARY KEY(kid,songid),
    FOREIGN KEY(kid) REFERENCES BandKuenstler ON DELETE CASCADE,
    FOREIGN KEY(songid) REFERENCES Song ON DELETE CASCADE
);

CREATE TABLE Folgt(
    username varchar(20),
    username2 varchar(20),
    PRIMARY KEY(username,username2),
    FOREIGN KEY(username) REFERENCES UserIn ON DELETE CASCADE,
    FOREIGN KEY(username2) REFERENCES UserIn ON DELETE CASCADE
);

CREATE TABLE Hoert(
    username varchar(20),
    datum varchar(30),
    ort varchar(20),
    songid integer,
    PRIMARY KEY(username, datum, ort),
    FOREIGN KEY(username) REFERENCES UserIn ON DELETE CASCADE,
    FOREIGN KEY(datum,ort) REFERENCES Zeitpunkt ON DELETE CASCADE,
    FOREIGN KEY(songid) REFERENCES Song ON DELETE CASCADE
);

----SEQUENCE

CREATE SEQUENCE seq_songid
    START WITH 1
    INCREMENT BY 1
    MAXVALUE 5000;

----TRIGGER

CREATE OR REPLACE TRIGGER song_trigger
    BEFORE INSERT ON Song
    FOR EACH ROW
    BEGIN
      :NEW.songid := seq_songid.NEXTVAL;
    END; 
/
     
CREATE OR REPLACE TRIGGER band_teilnehmerzahl
BEFORE INSERT ON BandKuenstler
FOR EACH ROW
BEGIN
   :NEW.teilnehmer :=  DBMS_RANDOM.VALUE(1,11);
END;
/  

----VIEWS

CREATE VIEW UserIn_Land_Count AS
SELECT land, COUNT(*) as num_users
FROM UserIn
GROUP BY land
HAVING COUNT(*) > 0;

CREATE VIEW ArtistSongs AS
SELECT sv.KID, sv.songID, s.songName, s.laenge
FROM SINGLEVEROEFFENTLICHT sv
JOIN SONG s ON sv.songID = s.songID;

CREATE VIEW BandSongs AS
SELECT bv.KID, bv.songID, s.songName, s.laenge
FROM BANDVEROEFFENTLICHT bv
JOIN SONG s ON bv.songID = s.songID;

CREATE VIEW UserIn_Playlists AS
SELECT * FROM UserIn
NATURAL JOIN Playlist;

CREATE VIEW UserHistorie AS
SELECT Hoert.username, Song.songname, Hoert.ort, Hoert.datum
FROM Hoert
JOIN Song ON Hoert.songid = Song.songid;


----PROCEDURE

CREATE OR REPLACE PROCEDURE InsertFollower(
    username1 IN VARCHAR,
    username2 IN VARCHAR,
    errorcode OUT NUMBER,
    followernum OUT NUMBER
)
IS
BEGIN
    INSERT INTO Folgt (username, username2)
    VALUES (username1, username2);
    
    errorcode := 0;
    
    SELECT COUNT(*) INTO followernum FROM Folgt WHERE username = username1;
    
    COMMIT;
EXCEPTION
    WHEN OTHERS THEN
        errorcode := 1;
END;
/
